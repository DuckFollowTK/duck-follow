{"version":3,"sources":["assets/img/duck.svg","assets/img/profile.jpg","assets/img/facebook.svg","assets/img/instagram.svg","assets/img/twitter.svg","components/TodoApp.js","components/Main.js","components/Policy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoApp","props","state","items","text","handleChange","bind","handleSubmit","Form","inline","onSubmit","this","FormGroup","className","Input","id","onChange","value","placeholder","Button","length","e","setState","target","preventDefault","newItem","Date","now","concat","React","Component","TodoList","fadeIn","handleRemove","map","item","Fade","in","tag","onClick","key","type","Main","src","duck","alt","href","rel","profile","facebook","instagram","twitter","Policy","Badge","color","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fc8f79e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/duck.7cb5d820.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.b9ec4ef9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.06468580.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.62593ffa.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.f58833da.svg\";","import { Button, Form, FormGroup, Label, Input, Fade } from 'reactstrap';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nexport default class TodoApp extends React.Component {\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n          items: [], \r\n          text: '' };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n            <h1>TO DO</h1>\r\n            <Form inline onSubmit={this.handleSubmit}>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                    <Input id=\"new-todo\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.text} placeholder=\"What needs to be done?\"/>\r\n                </FormGroup>\r\n                <Button>Add #{this.state.items.length + 1}</Button>\r\n            </Form>\r\n            <TodoList items={this.state.items} />\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    handleChange(e) {\r\n      this.setState({ text: e.target.value });\r\n    }\r\n  \r\n    handleSubmit(e) {\r\n      e.preventDefault();\r\n      if (this.state.text.length === 0) {\r\n        return;\r\n      }\r\n      const newItem = {\r\n        text: this.state.text,\r\n        id: Date.now()\r\n      };\r\n      this.setState(state => ({\r\n        items: state.items.concat(newItem),\r\n        text: ''\r\n      }));\r\n    }\r\n  }\r\n\r\n  class TodoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            fadeIn: true};\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n    }\r\n\r\n    handleRemove(e) {\r\n        e.preventDefault();\r\n        this.setState({\r\n            fadeIn: false\r\n        })\r\n    }\r\n    render() {\r\n      return (\r\n        <ul>\r\n          {this.props.items.map(item => (\r\n             <Fade in={this.state.fadeIn} tag=\"h5\" className=\"mt-3\"><li  onClick={this.handleRemove} key={item.id}><Input type=\"checkbox\" />{' '}{item.text}</li></Fade>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n  ","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport duck from '../assets/img/duck.svg'\r\nimport profile from '../assets/img/profile.jpg'\r\nimport facebook from '../assets/img/facebook.svg'\r\nimport instagram from '../assets/img/instagram.svg'\r\nimport twitter from '../assets/img/twitter.svg'\r\nimport '../App.css';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport TodoApp from './TodoApp'\r\n\r\nexport default class Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n            <section>\r\n              <header className=\"App-header\">\r\n                <img src={duck} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                  Edit <code>src/App.js</code> and save to reload.\r\n                </p>\r\n                <a\r\n                  className=\"App-link\"\r\n                  href=\"https://duckfollowtk.github.io/duck-follow/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Learn React\r\n                </a>\r\n              </header>\r\n            </section>\r\n            <section>\r\n              <div className=\"App-content\">\r\n                <img src={profile} className=\"img-circle img-profile\" alt=\"logo\" />\r\n                <p>\r\n                  Prasit Suphancho\r\n                </p>\r\n                <div>\r\n                  <a href=\"https://www.facebook.com/prasit.suphancho\">\r\n                    <img src={facebook} className=\"social-width\" alt=\"logo\" />\r\n                  </a>\r\n                  <a href=\"https://www.instagram.com/tankps/\">\r\n                    <img src={instagram} className=\"social-width\" alt=\"logo\" />\r\n                  </a>\r\n                  <a href=\"https://twitter.com/slammonder\">\r\n                    <img src={twitter} className=\"social-width\" alt=\"logo\" />\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </section>\r\n            <section>\r\n              <div className=\"App-content\">\r\n                <h1>made application</h1>\r\n              </div>\r\n            </section>\r\n            <section>\r\n              <div className=\"App-content\">\r\n                <TodoApp/>\r\n              </div>\r\n            </section>\r\n            <section>\r\n              <div className=\"App-content\">\r\n              </div>\r\n            </section>\r\n          </div>\r\n        );\r\n      }\r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport { Badge } from 'reactstrap';\r\n\r\nexport default class Policy extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-content\">\r\n                    <h1>Policy <Badge color=\"secondary\">privacy</Badge></h1>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}","import React from 'react';\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport Route from 'react-router-dom/Route'\r\n// import logo from './logo.svg';\r\nimport duck from './assets/img/duck.svg'\r\nimport profile from './assets/img/profile.jpg'\r\nimport facebook from './assets/img/facebook.svg'\r\nimport instagram from './assets/img/instagram.svg'\r\nimport twitter from './assets/img/twitter.svg'\r\nimport './App.css';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport Main from './components/Main'\r\nimport Policy from './components/Policy'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={Main}/>\r\n      <Route path=\"/duck-follow\" exact component={Main}/>\r\n      <Route path=\"/duck-follow/policy-privacy\" exact component={Policy}/>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}